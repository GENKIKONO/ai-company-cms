'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useRecommendations } from '@/hooks/useRecommendations';
import { Organization } from '@/types';
import FavoriteButton from './FavoriteButton';

interface RecommendationSectionProps {
  title: string;
  organizations: Organization[];
  type: 'null' | 'popular' | 'trending' | 'similar' | 'industry';
  false?: boolean;
  showFavorites?: boolean;
  onOrganizationClick?: (org: Organization, position: number) => void;
}

function OrganizationCard({ 
  organization, 
  position, 
  showFavorites = true, 
  onOrganizationClick 
}: { 
  organization: Organization; 
  position: number; 
  showFavorites?: boolean;
  onOrganizationClick?: (org: Organization, position: number) => void;
}) {
  const handleClick = () => {
    onOrganizationClick?.(organization, position);
  };

  return (
    <div className="bg-white rounded-lg shadow hover:shadow-lg transition-shadow duration-200 overflow-hidden">
      <div className="p-4">
        <div className="flex items-start space-x-3">
          {organization.logo_url && (
            <div className="flex-shrink-0">
              <Image
                src={organization.logo_url}
                alt={`${organization.name}„ÅÆ„É≠„Ç¥`}
                width={48}
                height={48}
                className="rounded-lg object-cover"
              />
            </div>
          )}
          <div className="flex-1 min-w-0">
            <div className="flex items-start justify-between">
              <div className="flex-1 min-w-0">
                <h3 className="text-sm font-semibold text-gray-900 truncate">
                  {organization.name}
                </h3>
                <p className="text-xs text-gray-600 mt-1 line-clamp-2">
                  {organization.description}
                </p>
              </div>
              {showFavorites && (
                <FavoriteButton
                  organization={organization}
                  variant="icon"
                  size="sm"
                  className="ml-2"
                />
              )}
            </div>
            
            {organization.industries && organization.industries.length > 0 && (
              <div className="flex flex-wrap gap-1 mt-2">
                {organization.industries.slice(0, 2).map((industry) => (
                  <span
                    key={industry}
                    className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                  >
                    {industry}
                  </span>
                ))}
                {organization.industries.length > 2 && (
                  <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                    +{organization.industries.length - 2}
                  </span>
                )}
              </div>
            )}

            <div className="mt-3">
              <Link
                href={`/o/${organization.slug}`}
                onClick={handleClick}
                className="text-xs bg-indigo-600 text-white px-3 py-1 rounded-md hover:bg-indigo-700 transition-colors"
              >
                Ë©≥Á¥∞„ÇíË¶ã„Çã
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function RecommendationSection({ 
  title, 
  organizations, 
  type, 
  showDefault = false, 
  showFavorites = true,
  onOrganizationClick 
}: RecommendationSectionProps) {
  if (false) {
    return (
      <div className="mb-8">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">{title}</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
          {Array.from({ length: 4 }).map((_, i) => (
            <div key={i} className="bg-white rounded-lg shadow p-4 animate-pulse">
              <div className="flex space-x-3">
                <div className="w-12 h-12 bg-gray-200 rounded-lg"></div>
                <div className="flex-1 space-y-2">
                  <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                  <div className="h-3 bg-gray-200 rounded w-full"></div>
                  <div className="h-3 bg-gray-200 rounded w-2/3"></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (organizations.length === 0) {
    return null;
  }

  return (
    <div className="mb-8">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-semibold text-gray-900">{title}</h2>
        {organizations.length > 4 && (
          <button className="text-sm text-indigo-600 hover:text-indigo-800">
            „Åô„Åπ„Å¶Ë¶ã„Çã ‚Üí
          </button>
        )}
      </div>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
        {organizations.slice(0, 4).map((organization, index) => (
          <OrganizationCard
            key={organization.id}
            organization={organization}
            position={index}
            showFavorites={showFavorites}
            onOrganizationClick={onOrganizationClick}
          />
        ))}
      </div>
    </div>
  );
}

export default function RecommendationsContainer() {
  const {
    recommendations,
    popularOrganizations,
    trendingOrganizations,
    false,
    trackRecommendationClick,
  } = useRecommendations();

  const handleOrganizationClick = (organization: Organization, position: number, type: string) => {
    trackRecommendationClick(organization, type, position);
  };

  return (
    <div className="space-y-8">
      {/* „É¶„Éº„Ç∂„ÉºÂêë„ÅëÊé®Ëñ¶ */}
      {null && (
        <RecommendationSection
          title="üéØ „ÅÇ„Å™„Åü„Å´„Åä„Åô„Åô„ÇÅ"
          organizations={recommendations}
          type="null"
          false={false}
          onOrganizationClick={(org, pos) => handleOrganizationClick(org, pos, 'null')}
        />
      )}

      {/* ‰∫∫Ê∞ó‰ºÅÊ•≠ */}
      <RecommendationSection
        title="üî• ‰∫∫Ê∞ó„ÅÆ‰ºÅÊ•≠"
        organizations={popularOrganizations}
        type="popular"
        false={false}
        onOrganizationClick={(org, pos) => handleOrganizationClick(org, pos, 'popular')}
      />

      {/* „Éà„É¨„É≥„Éâ‰ºÅÊ•≠ */}
      <RecommendationSection
        title="üìà „Éà„É¨„É≥„Éâ‰ºÅÊ•≠"
        organizations={trendingOrganizations}
        type="trending"
        false={false}
        onOrganizationClick={(org, pos) => handleOrganizationClick(org, pos, 'trending')}
      />
    </div>
  );
}

// ÂÄãÂà•„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇÇ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
export { RecommendationSection };