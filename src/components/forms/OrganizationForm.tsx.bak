'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { organizationSchema } from '@/lib/validation';
import { validateOrganizationPreflight } from '@/lib/validation';
import { toE164 } from '@/lib/jsonld';
import ExtractionAssistant from '@/components/ExtractionAssistant';
import OGPManager from '@/components/OGPManager';
import { ExtractedCandidates } from '@/lib/text-extraction';

  id?: string;
  name: string;
  slug: string;
  description: string;
  addressRegion: string;
  addressLocality: string;
  streetAddress: string;
  postalCode: string;
  telephone: string;
  email: string;
  emailPublic: boolean;
  url: string;
  logoUrl: string;
  founded: string;
  legalForm: string;
  representativeName: string;
  capital: string;
  employees: string;
};

type Props = {
  isLoading?: boolean;
};

    name: '',
    slug: '',
    description: '',
    addressRegion: '',
    addressLocality: '',
    streetAddress: '',
    postalCode: '',
    telephone: '',
    email: '',
    emailPublic: false,
    url: '',
    logoUrl: '',
    founded: '',
    legalForm: '株式会社',
    representativeName: '',
    capital: '',
    employees: '',
    ...initialData,
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [warnings, setWarnings] = useState<string[]>([]);
  const [isValidating, setIsValidating] = useState(false);
  const [showExtractionAssistant, setShowExtractionAssistant] = useState(!initialData);
  const [showOGPManager, setShowOGPManager] = useState(false);
  const [ogpMetadata, setOgpMetadata] = useState<any>(null);

  // name変更時のslug自動生成
  useEffect(() => {
    if (formData.name && !initialData?.slug) {
      const autoSlug = formData.name
        .toLowerCase()
        .replace(/[^a-z0-9\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');
      setFormData(prev => ({ ...prev, slug: autoSlug }));
    }
  }, [formData.name, initialData?.slug]);

    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const value = e.target.type === 'checkbox' ? (e.target as HTMLInputElement).checked : e.target.value;
    setFormData(prev => ({ ...prev, [field]: value }));
    
    // エラークリア
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const validateForm = async () => {
    setIsValidating(true);
    setErrors({});
    setWarnings([]);

    try {
      // Zodバリデーション
      const result = organizationSchema.safeParse(formData);
      const newErrors: Record<string, string> = {};

      if (!result.success) {
        result.error.errors.forEach(err => {
          const field = err.path[0] as string;
          newErrors[field] = err.message;
        });
      }

      // 必須項目チェック（requirements_system.mdに基づく）
      const requiredFields = {
        name: '企業名',
        description: '企業説明',
        addressRegion: '都道府県',
        addressLocality: '市区町村',
        telephone: '電話番号',
        url: '企業URL'
      };

      Object.entries(requiredFields).forEach(([field, label]) => {
          newErrors[field] = `${label}は必須です`;
        }
      });

      // Preflightバリデーション
      const preflightResult = await validateOrganizationPreflight({
        ...formData,
        telephoneE164: toE164(formData.telephone),
      });

      if (!preflightResult.success) {
        preflightResult.errors.forEach(error => {
          const field = error.split(':')[0];
          if (field && !newErrors[field]) {
            newErrors[field] = error;
          }
        });
      }

      setErrors(newErrors);
      setWarnings(preflightResult.warnings);

      return Object.keys(newErrors).length === 0;
    } catch (error) {
      console.error('Validation error:', error);
      setErrors({ general: 'バリデーションエラーが発生しました' });
      return false;
    } finally {
      setIsValidating(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const isValid = await validateForm();
    if (!isValid) return;

    try {
      await onSubmit(formData);
    } catch (error) {
      console.error('Submit error:', error);
      setErrors({ general: '保存に失敗しました' });
    }
  };

  const handleApplyCandidates = (candidates: ExtractedCandidates) => {
    setFormData(prev => {
      
      if (candidates.name) {
        updates.name = candidates.name;
      }
      if (candidates.description) {
        updates.description = candidates.description;
      }
      if (candidates.telephone) {
        updates.telephone = candidates.telephone;
      }
      if (candidates.email) {
        updates.email = candidates.email;
      }
      if (candidates.url) {
        updates.url = candidates.url;
      }
      if (candidates.address) {
        // 住所解析（簡易版）
        const addressParts = candidates.address.split(/[　\s]+/);
        if (addressParts.length >= 2) {
          const region = addressParts.find(part => part.endsWith('県') || part.endsWith('都') || part.endsWith('府') || part === '北海道');
          const locality = addressParts.find(part => part.endsWith('市') || part.endsWith('区') || part.endsWith('町') || part.endsWith('村'));
          
          if (region) updates.addressRegion = region;
          if (locality) updates.addressLocality = locality;
          
          const remaining = addressParts.filter(part => part !== region && part !== locality).join(' ');
          if (remaining) updates.streetAddress = remaining;
        }
      }
      
      return { ...prev, ...updates };
    });
    
    // エラーをクリア
    setErrors(prev => {
      const newErrors = { ...prev };
      fieldsToUpdate.forEach(field => {
        if (newErrors[field]) {
          delete newErrors[field];
        }
      });
      return newErrors;
    });
  };

  const handleOGPGenerated = (imageUrl: string, metadata: any) => {
    setOgpMetadata(metadata);
    // ロゴURLが生成された場合は、フォームにも反映
    if (imageUrl && !formData.logoUrl) {
      setFormData(prev => ({ ...prev, logoUrl: imageUrl }));
    }
  };

  const prefectures = [
    '北海道', '青森県', '岩手県', '宮城県', '秋田県', '山形県', '福島県',
    '茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県',
    '新潟県', '富山県', '石川県', '福井県', '山梨県', '長野県', '岐阜県',
    '静岡県', '愛知県', '三重県', '滋賀県', '京都府', '大阪府', '兵庫県',
    '奈良県', '和歌山県', '鳥取県', '島根県', '岡山県', '広島県', '山口県',
    '徳島県', '香川県', '愛媛県', '高知県', '福岡県', '佐賀県', '長崎県',
    '熊本県', '大分県', '宮崎県', '鹿児島県', '沖縄県'
  ];

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* メインフォーム */}
        <div className="lg:col-span-2">
          <form onSubmit={handleSubmit} className="space-y-8">
        {/* エラー表示 */}
        {errors.general && (
          <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded">
            {errors.general}
          </div>
        )}

        {/* 警告表示 */}
        {warnings.length > 0 && (
          <div className="bg-yellow-50 border border-yellow-200 text-yellow-700 px-4 py-3 rounded">
            <p className="font-medium mb-2">警告:</p>
            <ul className="list-disc list-inside space-y-1">
              {warnings.map((warning, index) => (
                <li key={index} className="text-sm">{warning}</li>
              ))}
            </ul>
          </div>
        )}

        {/* 基本情報 */}
        <div className="bg-white p-6 rounded-lg border">
          <h3 className="text-lg font-medium mb-4">基本情報</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                企業名 <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={handleInputChange('name')}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.name ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="株式会社○○"
              />
              {errors.name && <p className="text-red-500 text-xs mt-1">{errors.name}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                スラグ（URL用）
              </label>
              <input
                type="text"
                value={formData.slug}
                onChange={handleInputChange('slug')}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="company-name"
              />
              <p className="text-xs text-gray-500 mt-1">公開URL: /o/{formData.slug}</p>
            </div>

            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                企業説明 <span className="text-red-500">*</span>
              </label>
              <textarea
                value={formData.description}
                onChange={handleInputChange('description')}
                rows={3}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.description ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="企業の事業内容や特徴を簡潔に説明してください"
              />
              {errors.description && <p className="text-red-500 text-xs mt-1">{errors.description}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                法人形態
              </label>
              <select
                value={formData.legalForm}
                onChange={handleInputChange('legalForm')}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="株式会社">株式会社</option>
                <option value="有限会社">有限会社</option>
                <option value="合同会社">合同会社</option>
                <option value="個人事業主">個人事業主</option>
                <option value="その他">その他</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                代表者名
              </label>
              <input
                type="text"
                value={formData.representativeName}
                onChange={handleInputChange('representativeName')}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="代表取締役 ○○ ○○"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                設立年月日
              </label>
              <input
                type="date"
                value={formData.founded}
                onChange={handleInputChange('founded')}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                資本金
              </label>
              <input
                type="text"
                value={formData.capital}
                onChange={handleInputChange('capital')}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="1,000万円"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                従業員数
              </label>
              <input
                type="text"
                value={formData.employees}
                onChange={handleInputChange('employees')}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="50名"
              />
            </div>
          </div>
        </div>

        {/* 住所情報 */}
        <div className="bg-white p-6 rounded-lg border">
          <h3 className="text-lg font-medium mb-4">住所情報</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                都道府県 <span className="text-red-500">*</span>
              </label>
              <select
                value={formData.addressRegion}
                onChange={handleInputChange('addressRegion')}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.addressRegion ? 'border-red-500' : 'border-gray-300'
                }`}
              >
                <option value="">選択してください</option>
                {prefectures.map(pref => (
                  <option key={pref} value={pref}>{pref}</option>
                ))}
              </select>
              {errors.addressRegion && <p className="text-red-500 text-xs mt-1">{errors.addressRegion}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                市区町村 <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.addressLocality}
                onChange={handleInputChange('addressLocality')}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.addressLocality ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="港区"
              />
              {errors.addressLocality && <p className="text-red-500 text-xs mt-1">{errors.addressLocality}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                町名・番地
              </label>
              <input
                type="text"
                value={formData.streetAddress}
                onChange={handleInputChange('streetAddress')}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="赤坂1-2-3"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                郵便番号
              </label>
              <input
                type="text"
                value={formData.postalCode}
                onChange={handleInputChange('postalCode')}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.postalCode ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="123-4567"
              />
              {errors.postalCode && <p className="text-red-500 text-xs mt-1">{errors.postalCode}</p>}
            </div>
          </div>
        </div>

        {/* 連絡先情報 */}
        <div className="bg-white p-6 rounded-lg border">
          <h3 className="text-lg font-medium mb-4">連絡先情報</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                電話番号 <span className="text-red-500">*</span>
              </label>
              <input
                type="tel"
                value={formData.telephone}
                onChange={handleInputChange('telephone')}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.telephone ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="03-1234-5678"
              />
              {errors.telephone && <p className="text-red-500 text-xs mt-1">{errors.telephone}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                メールアドレス
              </label>
              <input
                type="email"
                value={formData.email}
                onChange={handleInputChange('email')}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.email ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="info@company.com"
              />
              {errors.email && <p className="text-red-500 text-xs mt-1">{errors.email}</p>}
            </div>

            <div className="md:col-span-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={formData.emailPublic}
                  onChange={handleInputChange('emailPublic')}
                  className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <span className="text-sm text-gray-700">メールアドレスを公開する</span>
              </label>
            </div>

            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                企業URL <span className="text-red-500">*</span>
              </label>
              <input
                type="url"
                value={formData.url}
                onChange={handleInputChange('url')}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.url ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="https://www.company.com"
              />
              {errors.url && <p className="text-red-500 text-xs mt-1">{errors.url}</p>}
            </div>

            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ロゴURL
              </label>
              <input
                type="url"
                value={formData.logoUrl}
                onChange={handleInputChange('logoUrl')}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.logoUrl ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="https://www.company.com/logo.png"
              />
              {errors.logoUrl && <p className="text-red-500 text-xs mt-1">{errors.logoUrl}</p>}
            </div>
          </div>
        </div>

        {/* 送信ボタン */}
        <div className="flex justify-end space-x-4">
          <button
            type="button"
            onClick={validateForm}
            disabled={isValidating}
            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
          >
            {isValidating ? '検証中...' : '検証'}
          </button>
          <button
            type="submit"
            disabled={isLoading || isValidating}
            className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
          >
            {isLoading ? '保存中...' : '保存'}
          </button>
            </div>
          </form>
        </div>

        {/* サイドバー - 入力アシスタント */}
        <div className="lg:col-span-1">
          {showExtractionAssistant && (
            <div className="sticky top-6">
              <ExtractionAssistant
                onApplyCandidates={handleApplyCandidates}
                disabled={isLoading || isValidating}
              />
              <div className="mt-4 text-center">
                <button
                  type="button"
                  onClick={() => setShowExtractionAssistant(false)}
                  className="text-sm text-gray-500 hover:text-gray-700"
                >
                  入力アシスタントを非表示
                </button>
              </div>
            </div>
          )}
          
          {!showExtractionAssistant && (
            <div className="sticky top-6 space-y-4">
              <div className="bg-gray-50 rounded-lg p-4 text-center">
                <p className="text-sm text-gray-600 mb-3">
                  企業サイトやPDFから情報を抽出して<br />
                  フォームを自動入力できます
                </p>
                <button
                  type="button"
                  onClick={() => setShowExtractionAssistant(true)}
                  className="px-4 py-2 text-sm font-medium text-indigo-600 bg-white border border-indigo-200 rounded-md hover:bg-indigo-50"
                >
                  入力アシスタントを表示
                </button>
              </div>

              {/* OGP管理 */}
              {showOGPManager ? (
                <OGPManager
                  companyName={formData.name}
                  description={formData.description}
                  logoUrl={formData.logoUrl}
                  onOGPGenerated={handleOGPGenerated}
                />
              ) : (
                <div className="bg-gray-50 rounded-lg p-4 text-center">
                  <p className="text-sm text-gray-600 mb-3">
                    SNSでシェアされる画像と<br />
                    メタデータを自動生成
                  </p>
                  <button
                    type="button"
                    onClick={() => setShowOGPManager(true)}
                    disabled={!formData.name.trim()}
                    className="px-4 py-2 text-sm font-medium text-purple-600 bg-white border border-purple-200 rounded-md hover:bg-purple-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    OGP設定を表示
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}