name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # 1️⃣ Code Quality & Testing
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📲 Install dependencies
        run: npm ci

      - name: 🔤 TypeScript check
        run: npm run typecheck

      - name: 🧹 ESLint check
        run: npm run lint

      - name: 🎨 Prettier check
        run: npm run format:check

      - name: 🧪 Unit tests
        run: npm run test:unit

  # 2️⃣ Build Test
  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📲 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run prod:build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_OPS_PASSWORD: ${{ secrets.ADMIN_OPS_PASSWORD }}

      - name: 📁 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 1

  # 3️⃣ E2E Testing (on feature branches)
  e2e-test:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref != 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📲 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install

      - name: 🌐 Run E2E tests
        run: npm run test:e2e
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: test-results/
          retention-days: 7

  # 4️⃣ Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run security audit
        run: npm audit --audit-level=moderate

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: 🔧 Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # 5️⃣ Deploy to Staging - DISABLED (Production-only policy)
  # deploy-staging:
  #   name: 🚀 Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [quality-check, build-test]
  #   if: github.ref == 'refs/heads/develop'
  #   environment: staging
  #   steps:
  #     - name: 📥 Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: 🚀 Deploy to Vercel (Preview)
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
  #         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
  #         working-directory: ./
  #         scope: ${{ secrets.VERCEL_ORG_ID }}

  # 6️⃣ Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, build-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📲 Install dependencies
        run: npm ci

      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 🏥 Post-deployment health check
        run: |
          sleep 30
          npm run health:production
        env:
          PRODUCTION_URL: https://aiohub.jp

      - name: 📢 Notify deployment success
        if: success()
        run: |
          echo "🎉 Production deployment successful!"
          echo "🌐 Live at: https://aiohub.jp"

  # 7️⃣ Performance Monitoring
  performance-check:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔬 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://aiohub.jp
            https://aiohub.jp/organizations
          configPath: '.github/lighthouse-ci.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # 8️⃣ Rollback (Manual)
  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔄 Rollback deployment
        run: |
          echo "🚨 Manual rollback triggered"
          # Add rollback logic here
          npm run deploy:staging

      - name: 📢 Notify rollback
        run: |
          echo "🔄 Rollback completed"
          echo "📧 Please verify the system status"