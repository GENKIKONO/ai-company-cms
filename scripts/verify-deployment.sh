#!/bin/bash

# Êú¨Áï™/„É≠„Éº„Ç´„É´ „Éá„Éó„É≠„Ç§Ê§úË®º„Çπ„ÇØ„É™„Éó„Éà - ÂÆåÂÖ®Ëá™ÂãïÂåñÁâà
# Usage: ./scripts/verify-deployment.sh [environment] [domain]
# Example: ./scripts/verify-deployment.sh development localhost:3001
# Example: ./scripts/verify-deployment.sh production aiohub.jp

set -e

# Ë®≠ÂÆö
ENVIRONMENT=${1:-production}
DOMAIN=${2:-aiohub.jp}
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOGS_DIR="$PROJECT_ROOT/logs"

# „É≠„Ç∞„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰ΩúÊàê
mkdir -p "$LOGS_DIR"

# URLÊßãÁØâÔºàÈñãÁô∫Áí∞Â¢É„ÅÆÂ†¥Âêà„ÅØhttp„ÄÅÊú¨Áï™Áí∞Â¢É„ÅÆÂ†¥Âêà„ÅØhttpsÔºâ
if [[ "$DOMAIN" == *"localhost"* ]]; then
    BASE_URL="http://${DOMAIN}"
else
    BASE_URL="https://${DOMAIN}"
fi

TIMESTAMP=$(date '+%Y%m%d%H%M%S')
LOG_FILE="$LOGS_DIR/verify-${ENVIRONMENT}-$(echo ${DOMAIN} | tr ':' '-')-${TIMESTAMP}.log"

# Ëâ≤‰ªò„Åç„É≠„Ç∞Èñ¢Êï∞
log_info() { 
    echo -e "\033[0;36m[INFO]\033[0m $1" | tee -a "$LOG_FILE"
}

log_success() { 
    echo -e "\033[0;32m[SUCCESS]\033[0m $1" | tee -a "$LOG_FILE"
}

log_warning() { 
    echo -e "\033[0;33m[WARNING]\033[0m $1" | tee -a "$LOG_FILE"
}

log_error() { 
    echo -e "\033[0;31m[ERROR]\033[0m $1" | tee -a "$LOG_FILE"
}

log_retry() {
    echo -e "\033[0;35m[RETRY]\033[0m $1" | tee -a "$LOG_FILE"
}

# „É™„Éà„É©„Ç§Ê©üËÉΩ‰ªò„ÅçHTTP„ÉÅ„Çß„ÉÉ„ÇØ
http_check_with_retry() {
    local url="$1"
    local expected_status="$2"
    local description="$3"
    local max_retries=3
    local retry_count=0
    local backoff=1
    
    while [ $retry_count -lt $max_retries ]; do
        if [ $retry_count -gt 0 ]; then
            log_retry "Retrying $description (attempt $((retry_count + 1))/$max_retries) after ${backoff}s..."
            sleep $backoff
            backoff=$((backoff * 2))  # ÊåáÊï∞„Éê„ÉÉ„ÇØ„Ç™„Éï
        fi
        
        local status
        status=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null || echo "000")
        
        if [[ "$status" =~ ^$expected_status$ ]]; then
            log_success "‚úÖ $description (HTTP $status)"
            return 0
        fi
        
        retry_count=$((retry_count + 1))
        if [ $retry_count -ge $max_retries ]; then
            log_error "‚ùå $description failed after $max_retries attempts (HTTP $status)"
            return 1
        fi
    done
}

# JSONËß£ÊûêÈñ¢Êï∞Ôºàjq„Å™„Åó„Åßok „Éï„Ç£„Éº„É´„Éâ„ÇíÊäΩÂá∫Ôºâ
extract_ok_field() {
    local json="$1"
    echo "$json" | sed -n 's/.*"ok":\s*\([^,}]*\).*/\1/p' | tr -d ' '
}

# „É°„Ç§„É≥Ê§úË®ºÈñãÂßã
log_info "üöÄ Starting deployment verification for $ENVIRONMENT environment"
log_info "Target: $BASE_URL"
log_info "Log file: $LOG_FILE"

# „Ç´„Ç¶„É≥„Çø„ÉºÂàùÊúüÂåñ
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# 1. „É´„Éº„ÉàÁñéÈÄö„ÉÅ„Çß„ÉÉ„ÇØ
log_info "1Ô∏è‚É£ Checking root connectivity..."
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
if http_check_with_retry "$BASE_URL/" "200|301|302" "Root endpoint"; then
    PASSED_CHECKS=$((PASSED_CHECKS + 1))
else
    FAILED_CHECKS=$((FAILED_CHECKS + 1))
fi

# 2. Well-known „Éï„Ç°„Ç§„É´„ÉÅ„Çß„ÉÉ„ÇØÔºàÂ≠òÂú®„Åô„Çã„ÇÇ„ÅÆ„ÅÆ„ÅøÔºâ
log_info "2Ô∏è‚É£ Checking well-known files..."

# robots.txt - 200 „Åæ„Åü„ÅØ 404 „Åß PASS
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
robots_status=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/robots.txt" 2>/dev/null || echo "000")
if [[ "$robots_status" =~ ^(200|404)$ ]]; then
    log_success "‚úÖ robots.txt (HTTP $robots_status - acceptable)"
    PASSED_CHECKS=$((PASSED_CHECKS + 1))
else
    log_error "‚ùå robots.txt failed (HTTP $robots_status - expected 200 or 404)"
    FAILED_CHECKS=$((FAILED_CHECKS + 1))
fi

# sitemap.xml - 200 „Åß PASS, 404 „Åß WARN
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
sitemap_status=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/sitemap.xml" 2>/dev/null || echo "000")
if [ "$sitemap_status" = "200" ]; then
    log_success "‚úÖ sitemap.xml (HTTP $sitemap_status)"
    PASSED_CHECKS=$((PASSED_CHECKS + 1))
elif [ "$sitemap_status" = "404" ]; then
    log_warning "‚ö†Ô∏è sitemap.xml (HTTP $sitemap_status - missing but not critical)"
    PASSED_CHECKS=$((PASSED_CHECKS + 1))  # 404 „ÇÇ PASS „Å®„Åó„Å¶Êâ±„ÅÜ
else
    log_error "‚ùå sitemap.xml failed (HTTP $sitemap_status)"
    FAILED_CHECKS=$((FAILED_CHECKS + 1))
fi

# 3. ÂÅ•ÂÖ®ÊÄß„ÉÅ„Çß„ÉÉ„ÇØAPI
log_info "3Ô∏è‚É£ Running comprehensive health check API..."
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

HEALTH_RESPONSE=""
HEALTH_OK="false"
max_retries=3
retry_count=0
backoff=1

while [ $retry_count -lt $max_retries ]; do
    if [ $retry_count -gt 0 ]; then
        log_retry "Retrying health check (attempt $((retry_count + 1))/$max_retries) after ${backoff}s..."
        sleep $backoff
        backoff=$((backoff * 2))
    fi
    
    HEALTH_RESPONSE=$(curl -s "$BASE_URL/api/health/deployment" 2>/dev/null || echo '{"ok":false,"error":"Connection failed"}')
    HEALTH_OK=$(extract_ok_field "$HEALTH_RESPONSE")
    
    if [ "$HEALTH_OK" = "true" ]; then
        log_success "‚úÖ Health check API passed"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
        break
    fi
    
    retry_count=$((retry_count + 1))
    if [ $retry_count -ge $max_retries ]; then
        log_error "‚ùå Health check API failed after $max_retries attempts"
        echo "Response: $HEALTH_RESPONSE" | tee -a "$LOG_FILE"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
done

# 4. ÁµÑÁπîAPIÁ¢∫Ë™ç
log_info "4Ô∏è‚É£ Testing organization API..."
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
if http_check_with_retry "$BASE_URL/api/my/organization" "401|200" "Organization API (expecting 401 for unauthenticated or 200)"; then
    PASSED_CHECKS=$((PASSED_CHECKS + 1))
else
    FAILED_CHECKS=$((FAILED_CHECKS + 1))
fi

# 5. Ë™çË®º„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÁ¢∫Ë™ç
log_info "5Ô∏è‚É£ Testing authentication endpoints..."
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
if http_check_with_retry "$BASE_URL/api/debug/whoami" "200" "Debug whoami endpoint"; then
    PASSED_CHECKS=$((PASSED_CHECKS + 1))
else
    FAILED_CHECKS=$((FAILED_CHECKS + 1))
fi

# „Çµ„Éû„É™„ÉºÈñãÂßã„Éû„Éº„Ç´„Éº
echo "=== SUMMARY BEGIN ===" | tee -a "$LOG_FILE"

# ÁµêÊûú„Çµ„Éû„É™„Éº
echo "" | tee -a "$LOG_FILE"
echo "üîç DEPLOYMENT VERIFICATION SUMMARY" | tee -a "$LOG_FILE"
echo "==================================" | tee -a "$LOG_FILE"
echo "Environment: $ENVIRONMENT" | tee -a "$LOG_FILE"
echo "Domain: $DOMAIN" | tee -a "$LOG_FILE"
echo "Target URL: $BASE_URL" | tee -a "$LOG_FILE"
echo "Timestamp: $(date)" | tee -a "$LOG_FILE"
echo "Log file: $LOG_FILE" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"
echo "Results:" | tee -a "$LOG_FILE"
echo "  Total checks: $TOTAL_CHECKS" | tee -a "$LOG_FILE"
echo "  Passed: $PASSED_CHECKS" | tee -a "$LOG_FILE"
echo "  Failed: $FAILED_CHECKS" | tee -a "$LOG_FILE"
echo "  Success rate: $(( PASSED_CHECKS * 100 / TOTAL_CHECKS ))%" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

# Ë©≥Á¥∞ÁµêÊûú
if [ "$HEALTH_OK" = "true" ]; then
    echo "‚úÖ Health check API: PASSED" | tee -a "$LOG_FILE"
else
    echo "‚ùå Health check API: FAILED" | tee -a "$LOG_FILE"
fi

# ÊúÄÁµÇÂà§ÂÆö
if [ $FAILED_CHECKS -eq 0 ]; then
    log_success "üéâ ‚úÖ $(echo $ENVIRONMENT | tr '[:lower:]' '[:upper:]') verification passed"
    echo "‚úÖ All critical systems operational" | tee -a "$LOG_FILE"
    echo "‚úÖ Ready for traffic" | tee -a "$LOG_FILE"
    FINAL_RESULT="PASSED"
    EXIT_CODE=0
else
    log_error "‚ùå Verification failed"
    echo "‚ùå $FAILED_CHECKS/$TOTAL_CHECKS checks failed" | tee -a "$LOG_FILE"
    echo "‚ùå Review logs before proceeding" | tee -a "$LOG_FILE"
    FINAL_RESULT="FAILED"
    EXIT_CODE=1
fi

echo "" | tee -a "$LOG_FILE"
echo "Final Result: $FINAL_RESULT" | tee -a "$LOG_FILE"

# „Çµ„Éû„É™„ÉºÁµÇ‰∫Ü„Éû„Éº„Ç´„Éº
echo "=== SUMMARY END ===" | tee -a "$LOG_FILE"

echo "" | tee -a "$LOG_FILE"
log_info "Verification complete. Log saved to: $LOG_FILE"

exit $EXIT_CODE