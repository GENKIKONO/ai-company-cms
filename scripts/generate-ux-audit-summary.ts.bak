#!/usr/bin/env ts-node

import fs from 'fs';
import path from 'path';
import { glob } from 'glob';

interface AuditIssue {
  id: string;
  severity: 'critical' | 'major' | 'minor' | 'nit';
  viewport: string;
  selector: string;
  evidence: string;
  screenshot: string;
  guideline: string;
}

interface PageAuditResult {
  url: string;
  viewports: string[];
  issues: AuditIssue[];
  a11y: {
    critical: number;
    serious: number;
    moderate: number;
    minor: number;
    violations: any[];
  };
  perf_notes: string[];
  timestamp: string;
}

interface SummaryData {
  totalPages: number;
  totalViewports: number;
  totalIssues: number;
  issuesBySeverity: Record<string, number>;
  issuesByPage: Record<string, number>;
  a11yTotals: Record<string, number>;
  topIssues: Array<{
    id: string;
    severity: string;
    count: number;
    pages: string[];
    description: string;
  }>;
}

async function generateAuditSummary(): Promise<void> {
  const reportsDir = 'reports/responsive-audit';
  const summaryPath = path.join(reportsDir, 'summary.md');
  
  // JSON„É¨„Éù„Éº„Éà„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢
  const reportFiles = await glob(path.join(reportsDir, '*.json'));
  
  if (reportFiles.length === 0) {
    console.error('‚ùå No audit report files found in reports/responsive-audit/');
    process.exit(1);
  }
  
  const allResults: PageAuditResult[] = [];
  const summary: SummaryData = {
    totalPages: 0,
    totalViewports: 0,
    totalIssues: 0,
    issuesBySeverity: { critical: 0, major: 0, minor: 0, nit: 0 },
    issuesByPage: {},
    a11yTotals: { critical: 0, serious: 0, moderate: 0, minor: 0 },
    topIssues: []
  };
  
  // ÂêÑ„É¨„Éù„Éº„Éà„ÇíË™≠„ÅøËæº„Åø„ÄÅÈõÜË®à
  for (const reportFile of reportFiles) {
    try {
      const content = fs.readFileSync(reportFile, 'utf-8');
      const result: PageAuditResult = JSON.parse(content);
      allResults.push(result);
      
      // Âü∫Êú¨Áµ±Ë®à
      summary.totalIssues += result.issues.length;
      summary.issuesByPage[result.url] = result.issues.length;
      
      // ÈáçË¶ÅÂ∫¶Âà•ÈõÜË®à
      for (const issue of result.issues) {
        summary.issuesBySeverity[issue.severity]++;
      }
      
      // A11yÁµ±Ë®à
      summary.a11yTotals.critical += result.a11y.critical;
      summary.a11yTotals.serious += result.a11y.serious;
      summary.a11yTotals.moderate += result.a11y.moderate;
      summary.a11yTotals.minor += result.a11y.minor;
      
    } catch (error) {
      console.error(`‚ö†Ô∏è  Failed to parse ${reportFile}:`, error);
    }
  }
  
  // „É¶„Éã„Éº„ÇØ„Éö„Éº„Ç∏Êï∞„Å®„Éì„É•„Éº„Éù„Éº„ÉàÊï∞„ÇíË®àÁÆó
  const uniquePages = new Set(allResults.map(r => r.url));
  const uniqueViewports = new Set(allResults.map(r => r.viewports[0]));
  summary.totalPages = uniquePages.size;
  summary.totalViewports = uniqueViewports.size;
  
  // Top10ÂïèÈ°å„ÅÆÁâπÂÆö
  const issueMap = new Map<string, { count: number; pages: Set<string>; severity: string; description: string }>();
  
  for (const result of allResults) {
    for (const issue of result.issues) {
      const key = issue.id;
      if (!issueMap.has(key)) {
        issueMap.set(key, {
          count: 0,
          pages: new Set(),
          severity: issue.severity,
          description: issue.guideline
        });
      }
      const entry = issueMap.get(key)!;
      entry.count++;
      entry.pages.add(result.url);
    }
  }
  
  summary.topIssues = Array.from(issueMap.entries())
    .map(([id, data]) => ({
      id,
      severity: data.severity,
      count: data.count,
      pages: Array.from(data.pages),
      description: data.description
    }))
    .sort((a, b) => {
      // ÈáçË¶ÅÂ∫¶„Å®„Ç´„Ç¶„É≥„Éà„Åß„ÇΩ„Éº„Éà
      const severityOrder = { critical: 4, major: 3, minor: 2, nit: 1 };
      const aSeverity = severityOrder[a.severity as keyof typeof severityOrder] || 0;
      const bSeverity = severityOrder[b.severity as keyof typeof severityOrder] || 0;
      
      if (aSeverity !== bSeverity) {
        return bSeverity - aSeverity;
      }
      return b.count - a.count;
    })
    .slice(0, 10);
  
  // Markdown„É¨„Éù„Éº„ÉàÁîüÊàê
  const markdown = generateMarkdownReport(summary, allResults);
  
  // „Éï„Ç°„Ç§„É´Âá∫Âäõ
  fs.writeFileSync(summaryPath, markdown);
  
  console.log('‚úÖ UX Audit Summary generated:');
  console.log(`   üìÑ ${summaryPath}`);
  console.log(`   üìä ${summary.totalPages} pages, ${summary.totalViewports} viewports`);
  console.log(`   üîç ${summary.totalIssues} issues found`);
  console.log(`   üö® Critical: ${summary.issuesBySeverity.critical}, Major: ${summary.issuesBySeverity.major}`);
  console.log(`   ‚ôø A11y Critical: ${summary.a11yTotals.critical}, Serious: ${summary.a11yTotals.serious}`);
}

function generateMarkdownReport(summary: SummaryData, allResults: PageAuditResult[]): string {
  const timestamp = new Date().toISOString().split('T')[0];
  
  return `# AIOHub UX/UIÁõ£Êüª„É¨„Éù„Éº„Éà

**Áõ£ÊüªÊó•**: ${timestamp}  
**ÂØæË±°**: https://aiohub.jp (Êú¨Áï™Áí∞Â¢É)  
**Áõ£ÊüªÁØÑÂõ≤**: ${summary.totalPages}„Éö„Éº„Ç∏ √ó ${summary.totalViewports}„Éì„É•„Éº„Éù„Éº„Éà

## üìä „Çµ„Éû„É™„Éº

### Ê§úÂá∫ÂïèÈ°å„ÅÆÊ¶ÇË¶Å
- **Á∑èÂïèÈ°åÊï∞**: ${summary.totalIssues}‰ª∂
- **Critical**: ${summary.issuesBySeverity.critical}‰ª∂
- **Major**: ${summary.issuesBySeverity.major}‰ª∂  
- **Minor**: ${summary.issuesBySeverity.minor}‰ª∂
- **Nit**: ${summary.issuesBySeverity.nit}‰ª∂

### „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Áõ£ÊüªÁµêÊûú
- **Critical**: ${summary.a11yTotals.critical}‰ª∂
- **Serious**: ${summary.a11yTotals.serious}‰ª∂
- **Moderate**: ${summary.a11yTotals.moderate}‰ª∂
- **Minor**: ${summary.a11yTotals.minor}‰ª∂

## üìÑ „Éö„Éº„Ç∏Âà•ÂïèÈ°åÊï∞

${Object.entries(summary.issuesByPage)
  .sort(([,a], [,b]) => b - a)
  .map(([page, count]) => `- **${page}**: ${count}‰ª∂`)
  .join('\n')}

## üî• ÂÑ™ÂÖà‰øÆÊ≠£Top10

${summary.topIssues.map((issue, index) => `### ${index + 1}. ${issue.id}

**ÈáçË¶ÅÂ∫¶**: ${issue.severity.toUpperCase()}  
**Áô∫ÁîüÂõûÊï∞**: ${issue.count}‰ª∂  
**ÂΩ±Èüø„Éö„Éº„Ç∏**: ${issue.pages.join(', ')}  

**„Ç¨„Ç§„Éâ„É©„Ç§„É≥**: ${issue.description}

**„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà**: [Èñ¢ÈÄ£„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà](./screenshots/) (Ë©≤ÂΩì„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç)

---`).join('\n\n')}

## üîç Ë©≥Á¥∞ÂàÜÊûê

### „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøúÁä∂Ê≥Å
${summary.issuesBySeverity.critical > 0 ? 
  `‚ö†Ô∏è **Ê®™„Çπ„ÇØ„É≠„Éº„É´ÂïèÈ°å**: ${summary.topIssues.filter(i => i.id === 'HORIZONTAL_OVERFLOW').length}‰ª∂Ê§úÂá∫` : 
  '‚úÖ Ê®™„Çπ„ÇØ„É≠„Éº„É´ÂïèÈ°å„Å™„Åó'}

### CTA/Êìç‰ΩúÊÄß
${summary.topIssues.filter(i => i.id.includes('CTA') || i.id.includes('TAP')).length > 0 ?
  `‚ö†Ô∏è **CTA/„Çø„ÉÉ„Éó„Çø„Éº„Ç≤„ÉÉ„ÉàÂïèÈ°å**: ${summary.topIssues.filter(i => i.id.includes('CTA') || i.id.includes('TAP')).map(i => i.count).reduce((a, b) => a + b, 0)}‰ª∂Ê§úÂá∫` :
  '‚úÖ CTA/„Çø„ÉÉ„Éó„Çø„Éº„Ç≤„ÉÉ„ÉàÂïèÈ°å„Å™„Åó'}

### „É™„É≥„ÇØ/„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥
${summary.topIssues.filter(i => i.id.includes('BROKEN')).length > 0 ?
  `‚ö†Ô∏è **Â£ä„Çå„Åü„É™„É≥„ÇØ**: ${summary.topIssues.filter(i => i.id.includes('BROKEN')).map(i => i.count).reduce((a, b) => a + b, 0)}‰ª∂Ê§úÂá∫` :
  '‚úÖ Â£ä„Çå„Åü„É™„É≥„ÇØ„Å™„Åó'}

## üí° ‰øÆÊ≠£ÊñπÈáù„ÅÆÂè©„ÅçÂè∞

### Âç≥Â∫ßÂØæÂøúÔºàCriticalÔºâ
${summary.issuesBySeverity.critical > 0 ? 
  summary.topIssues
    .filter(issue => issue.severity === 'critical')
    .map(issue => `- **${issue.id}**: ${issue.description}`)
    .join('\n') :
  '- CriticalÂïèÈ°å„Å™„Åó ‚úÖ'}

### ËøëÊó•ÂØæÂøúÔºàMajorÔºâ
${summary.issuesBySeverity.major > 0 ? 
  summary.topIssues
    .filter(issue => issue.severity === 'major')
    .slice(0, 5)
    .map(issue => `- **${issue.id}**: ${issue.description}`)
    .join('\n') :
  '- MajorÂïèÈ°å„Å™„Åó ‚úÖ'}

## üìÅ Èñ¢ÈÄ£„Éï„Ç°„Ç§„É´

### ÁîüÊàê„É¨„Éù„Éº„Éà
- üìÑ \`reports/responsive-audit/summary.md\` („Åì„ÅÆ„Éï„Ç°„Ç§„É´)
- üìÑ \`reports/responsive-audit/*-*.json\` („Éö„Éº„Ç∏Âà•Ë©≥Á¥∞)
- üì∑ \`reports/responsive-audit/screenshots/\` (ÂïèÈ°åÁÆáÊâÄ„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà)

### ÂÆüË°åÊñπÊ≥ï
\`\`\`bash
npm run audit:ux
\`\`\`

### „ÉÜ„Çπ„ÉàË®≠ÂÆö
- \`playwright.ux-audit.config.ts\` - Áõ£ÊüªÂ∞ÇÁî®Ë®≠ÂÆö
- \`tests/ux-audit/responsive-audit.spec.ts\` - Áõ£Êüª„ÉÜ„Çπ„Éà„Ç≥„Éº„Éâ

---

**‚ö†Ô∏è Ê≥®ÊÑè**: „Åì„ÅÆÁõ£Êüª„ÅØË™≠„ÅøÂèñ„ÇäÂ∞ÇÁî®„ÅßÂÆüÊñΩ„Åï„Çå„Å¶„Åä„Çä„ÄÅ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÂãï‰Ωú„Å´„ÅØÂΩ±Èüø„Åó„Åæ„Åõ„Çì„ÄÇ  
**üéØ Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó**: ÂÑ™ÂÖà‰øÆÊ≠£Top10„Åã„ÇâÁùÄÊâã„Åó„ÄÅÊÆµÈöéÁöÑ„Å´UXÊîπÂñÑ„ÇíÂÆüÊñΩ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
`;
}

// „É°„Ç§„É≥ÂÆüË°å
generateAuditSummary().catch(error => {
  console.error('‚ùå Failed to generate audit summary:', error);
  process.exit(1);
});

export { generateAuditSummary };